class ProjectsController {
    constructor(app) {
        this.app = app;
        this.errorHandler = app.getErrorHandler();
        this.i18n = app.getI18n();
        
        this.projects = [];
        this.userLevel = 0;
        this.isActive = false;
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.loadProjectsData();
        console.log('Projects Controller initialized');
    }
    
    setupEventListeners() {
        // Project details buttons
        document.querySelectorAll('.project-details-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const projectId = e.currentTarget.dataset.project;
                this.showProjectDetails(projectId);
            });
        });
        
        // Project open buttons
        document.querySelectorAll('.project-open-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const projectId = e.currentTarget.dataset.project;
                this.openProject(projectId);
            });
        });
        
        // Proposal form
        document.getElementById('submit-proposal-btn')?.addEventListener('click', () => {
            this.submitProposal();
        });
        
        document.getElementById('clear-form-btn')?.addEventListener('click', () => {
            this.clearProposalForm();
        });
        
        // Modal handlers
        document.querySelectorAll('.modal-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', () => {
                closeBtn.closest('.modal').style.display = 'none';
            });
        });
    }
    
    async loadProjectsData() {
        try {
            this.errorHandler.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
            
            // Get user data
            const userProfile = this.app.getUserProfile();
            if (userProfile) {
                this.userLevel = this.getUserMaxLevel();
                this.isActive = this.checkUserActivity();
            }
            
            // Load projects configuration
            this.projects = this.getProjectsConfig();
            
            // Update project availability
            this.updateProjectsAvailability();
            
            // Update statistics
            this.updateProjectStatistics();
            
        } catch (error) {
            console.error('Failed to load projects data:', error);
            this.errorHandler.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
        } finally {
            this.errorHandler.hideLoading();
        }
    }
    
    getUserMaxLevel() {
        const userProfile = this.app.getUserProfile();
        if (userProfile?.activeLevels) {
            return Math.max(...userProfile.activeLevels);
        }
        return 0;
    }
    
    checkUserActivity() {
        // Check if user is active (paid quarterly fee)
        // This would normally come from contract data
        return true; // Demo: assume user is active
    }
    
    getProjectsConfig() {
        return [
            {
                id: 'cardgift',
                name: 'CardGift',
                icon: 'üéÅ',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫ –∏ –≤–∏–¥–µ–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π',
                requiredLevel: 1,
                status: 'available',
                url: 'https://cardgift.globalway.club',
                features: [
                    '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫',
                    '–í–∏–¥–µ–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
                    '–®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤',
                    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏'
                ]
            },
            {
                id: 'globaltub',
                name: 'GlobalTub',
                icon: 'üì∫',
                description: '–í–∏–¥–µ–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ GWT —Ç–æ–∫–µ–Ω—ã',
                requiredLevel: 2,
                status: 'development',
                url: null,
                features: [
                    '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ',
                    '–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ GWT',
                    '–°—Ç—Ä–∏–º–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
                    '–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤'
                ]
            },
            {
                id: 'globalmarket',
                name: 'GlobalMarket',
                icon: 'üõçÔ∏è',
                description: '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GWT',
                requiredLevel: 3,
                status: 'planning',
                url: null,
                features: [
                    '–ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤',
                    '–û–ø–ª–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞–º–∏ GWT',
                    '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤',
                    '–ó–∞—â–∏—Ç–∞ —Å–¥–µ–ª–æ–∫'
                ]
            },
            {
                id: 'globalgame',
                name: 'GlobalGame',
                icon: 'üéÆ',
                description: '–ò–≥—Ä–æ–≤–æ–π –º–æ–¥—É–ª—å —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –Ω–∞ GWT',
                requiredLevel: 4,
                status: 'concept',
                url: null,
                features: [
                    '–ú–∏–Ω–∏-–∏–≥—Ä—ã',
                    '–ó–∞—Ä–∞–±–æ—Ç–æ–∫ GWT —Ç–æ–∫–µ–Ω–æ–≤',
                    '–¢—É—Ä–Ω–∏—Ä—ã –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è',
                    'NFT –ø—Ä–µ–¥–º–µ—Ç—ã'
                ]
            },
            {
                id: 'globaledu',
                name: 'GlobalEdu',
                icon: 'üéì',
                description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π',
                requiredLevel: 5,
                status: 'planning',
                url: null,
                features: [
                    '–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã',
                    '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–ª–æ–∫—á–µ–π–Ω',
                    '–í–µ–±–∏–Ω–∞—Ä—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã',
                    '–ú–µ–Ω—Ç–æ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'
                ]
            },
            {
                id: 'globalbank',
                name: 'GlobalBank',
                icon: 'üè¶',
                description: 'DeFi –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ',
                requiredLevel: 7,
                status: 'future',
                url: null,
                features: [
                    '–°—Ç–µ–π–∫–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤',
                    '–ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ',
                    '–î–µ–ø–æ–∑–∏—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                    'DeFi –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
                ]
            }
        ];
    }
    
    updateProjectsAvailability() {
        this.projects.forEach(project => {
            const projectCard = document.querySelector(`[data-project="${project.id}"]`);
            if (!projectCard) return;
            
            const statusBadge = projectCard.querySelector('.status-badge');
            const openBtn = projectCard.querySelector('.project-open-btn');
            
            // Check if user meets requirements
            const hasRequiredLevel = this.userLevel >= project.requiredLevel;
            const meetsRequirements = hasRequiredLevel && this.isActive;
            
            // Update status badge
            if (statusBadge) {
                statusBadge.className = `status-badge ${project.status}`;
                statusBadge.textContent = this.getStatusText(project.status);
            }
            
            // Update open button
            if (openBtn) {
                if (project.status === 'available' && meetsRequirements) {
                    openBtn.disabled = false;
                    openBtn.innerHTML = '<span data-i18n="openProject">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç</span>';
                } else if (!hasRequiredLevel) {
                    openBtn.disabled = true;
                    openBtn.innerHTML = `<span>–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${project.requiredLevel}+</span>`;
                } else if (!this.isActive) {
                    openBtn.disabled = true;
                    openBtn.innerHTML = '<span>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>';
                } else {
                    openBtn.disabled = true;
                    openBtn.innerHTML = '<span data-i18n="comingSoon">–°–∫–æ—Ä–æ</span>';
                }
            }
            
            // Update card appearance
            if (meetsRequirements && project.status === 'available') {
                projectCard.classList.add('accessible');
            } else {
                projectCard.classList.remove('accessible');
            }
        });
    }
    
    getStatusText(status) {
        const statusMap = {
            'available': '–î–æ—Å—Ç—É–ø–µ–Ω',
            'development': '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            'planning': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'concept': '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è',
            'future': '–ë—É–¥—É—â–µ–µ'
        };
        return statusMap[status] || status;
    }
    
    showProjectDetails(projectId) {
        const project = this.projects.find(p => p.id === projectId);
        if (!project) return;
        
        const modal = document.getElementById('project-details-modal');
        const modalTitle = document.getElementById('project-modal-title');
        const modalContent = document.getElementById('project-modal-content');
        
        if (!modal || !modalTitle || !modalContent) return;
        
        modalTitle.textContent = project.name;
        modalContent.innerHTML = `
            <div class="project-detail-content">
                <div class="project-detail-header">
                    <div class="project-detail-icon">${project.icon}</div>
                    <div class="project-detail-info">
                        <h3>${project.name}</h3>
                        <p>${project.description}</p>
                    </div>
                </div>
                
                <div class="project-requirements-detail">
                    <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:</h4>
                    <ul>
                        <li>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: ${project.requiredLevel}+</li>
                        <li>–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞</li>
                        <li>–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${this.getStatusText(project.status)}</li>
                    </ul>
                </div>
                
                <div class="project-features">
                    <h4>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
                    <ul>
                        ${project.features.map(feature => `<li>${feature}</li>`).join('')}
                    </ul>
                </div>
                
                <div class="project-access-status">
                    ${this.getAccessStatusHTML(project)}
                </div>
                
                ${project.url ? `
                    <div class="project-actions-detail">
                        <button class="action-btn primary" onclick="window.open('${project.url}', '_blank')">
                            –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
        
        modal.style.display = 'block';
    }
    
    getAccessStatusHTML(project) {
        const hasRequiredLevel = this.userLevel >= project.requiredLevel;
        const meetsRequirements = hasRequiredLevel && this.isActive;
        
        if (project.status !== 'available') {
            return `
                <div class="access-status development">
                    <div class="status-icon">üîß</div>
                    <div class="status-text">
                        <strong>–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏: ${this.getStatusText(project.status)}</strong>
                        <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–µ</p>
                    </div>
                </div>
            `;
        }
        
        if (meetsRequirements) {
            return `
                <div class="access-status available">
                    <div class="status-icon">‚úÖ</div>
                    <div class="status-text">
                        <strong>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É</strong>
                        <p>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞</p>
                    </div>
                </div>
            `;
        }
        
        if (!hasRequiredLevel) {
            return `
                <div class="access-status blocked">
                    <div class="status-icon">üîí</div>
                    <div class="status-text">
                        <strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å</strong>
                        <p>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å ${project.requiredLevel} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É</p>
                    </div>
                </div>
            `;
        }
        
        if (!this.isActive) {
            return `
                <div class="access-status inactive">
                    <div class="status-icon">‚è∞</div>
                    <div class="status-text">
                        <strong>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</strong>
                        <p>–û–ø–ª–∞—Ç–∏—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</p>
                    </div>
                </div>
            `;
        }
        
        return '';
    }
    
    openProject(projectId) {
        const project = this.projects.find(p => p.id === projectId);
        if (!project) return;
        
        const hasRequiredLevel = this.userLevel >= project.requiredLevel;
        const meetsRequirements = hasRequiredLevel && this.isActive;
        
        if (project.status !== 'available') {
            this.errorHandler.showWarning('–ü—Ä–æ–µ–∫—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        if (!meetsRequirements) {
            if (!hasRequiredLevel) {
                this.errorHandler.showError(`–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${project.requiredLevel}+`);
            } else if (!this.isActive) {
                this.errorHandler.showError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
            }
            return;
        }
        
        if (project.url) {
            window.open(project.url, '_blank');
        } else {
            this.errorHandler.showWarning('–ü—Ä–æ–µ–∫—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    submitProposal() {
        const form = this.getProposalFormData();
        
        if (!this.validateProposalForm(form)) {
            return;
        }
        
        try {
            this.errorHandler.showLoading('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...');
            
            // Simulate sending proposal
            setTimeout(() => {
                this.errorHandler.hideLoading();
                this.errorHandler.showSuccess('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ');
                this.clearProposalForm();
            }, 2000);
            
        } catch (error) {
            this.errorHandler.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        }
    }
    
    getProposalFormData() {
        return {
            authorName: document.getElementById('author-name')?.value?.trim() || '',
            authorContact: document.getElementById('author-contact')?.value?.trim() || '',
            projectSphere: document.getElementById('project-sphere')?.value || '',
            projectIdea: document.getElementById('project-idea')?.value?.trim() || '',
            projectDescription: document.getElementById('project-description')?.value?.trim() || ''
        };
    }
    
    validateProposalForm(form) {
        if (!form.authorName) {
            this.errorHandler.showError('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return false;
        }
        
        if (!form.authorContact) {
            this.errorHandler.showError('–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
            return false;
        }
        
        if (!form.projectSphere) {
            this.errorHandler.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            return false;
        }
        
        if (!form.projectIdea) {
            this.errorHandler.showError('–£–∫–∞–∂–∏—Ç–µ –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞');
            return false;
        }
        
        if (!form.projectDescription) {
            this.errorHandler.showError('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ');
            return false;
        }
        
        if (form.projectDescription.length < 50) {
            this.errorHandler.showError('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤');
            return false;
        }
        
        return true;
    }
    
    clearProposalForm() {
        document.getElementById('author-name').value = '';
        document.getElementById('author-contact').value = '';
        document.getElementById('project-sphere').value = '';
        document.getElementById('project-idea').value = '';
        document.getElementById('project-description').value = '';
    }
    
    updateProjectStatistics() {
        const totalProjects = this.projects.length;
        const activeProjects = this.projects.filter(p => p.status === 'available').length;
        const developmentProjects = this.projects.filter(p => p.status === 'development').length;
        const comingSoonProjects = this.projects.filter(p => 
            ['planning', 'concept', 'future'].includes(p.status)
        ).length;
        
        document.getElementById('total-projects').textContent = totalProjects;
        document.getElementById('active-projects').textContent = activeProjects;
        document.getElementById('development-projects').textContent = developmentProjects;
        document.getElementById('coming-soon-projects').textContent = comingSoonProjects;
        document.getElementById('review-projects').textContent = '0'; // No proposals yet
        document.getElementById('total-project-users').textContent = '0'; // Will be updated with real data
    }
    
    // Update method called by main app
    async update() {
        await this.loadProjectsData();
    }
}

// Export for global use
window.ProjectsController = ProjectsController;
